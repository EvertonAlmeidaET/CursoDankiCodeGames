package zeldaminiclone;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferStrategy;

import javax.swing.JFrame;

import com.sun.tools.javac.util.Context.Key;

public class Game extends Canvas implements Runnable, KeyListener{
	
	public static int WIDTH = 480, HEIGHT = 480;
	Player player;
	
	public Game() {
		this.addKeyListener(this);
		this.setPreferredSize(new Dimension(WIDTH, HEIGHT));
		this.player = new Player(0, 0);
	}
	
	public void tick(){
		player.tick();
	}
	
	public void render() {
		BufferStrategy bs = this.getBufferStrategy();
		
		if(bs == null) {
			this.createBufferStrategy(3);
			return;
		}
		
		Graphics g = bs.getDrawGraphics();
		
		g.setColor(Color.black);
		g.fillRect(0, 0, WIDTH, HEIGHT);
		
		
		player.render(g);
		
		bs.show();
		
		
		
	}
	
	public static void main(String[] args) {
		Game gameInicio = new Game();
		JFrame frame = new JFrame();
		frame.add(gameInicio);
		frame.setTitle("Mini Zelda");
		frame.setLocationRelativeTo(null);
		frame.pack();
		
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		frame.setVisible(true);
		
		new Thread(gameInicio).start();
		
	}
	
	@Override
	public void run() {
		
		while(true) {
			System.out.println("chamando game looping!");
			tick();
			render();
			try {
				Thread.sleep(1000/60);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyPressed(KeyEvent e) {
		if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
			player.setRight(true);
		} else if(e.getKeyCode() == KeyEvent.VK_LEFT) {
			player.setLeft(true);
		}
		
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}
	
}
